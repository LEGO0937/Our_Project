이번주 한 일 (2020.03.23~ 2020.03.29)
//-----------------------------------------------------
김영완: 
숫자가 그려진 스프라이트 이미지를 사용하여 수를 표현할 ui들을 위한 셰이더 제작.
이 셰이더는 게임 내에서의 경과 시간, 통과 트랙 수를 보여주기 위해 사용됨 방법은
스프라이트에 대한 인덱스를 상수버퍼 구조체에 담아 셰이더에 보내고 셰이더 함수내에서
인덱스에 해당되는 위치에서 한 칸크기만큼 ui평면에 출력하도록 하였음.
ㄴ> 숫자 수만큼 텍스처를 불러올 필요없이 하나의 텍스처로 숫자를 표현할 수 있게 되었다.

Ui는 사각형 평면의 메시에 텍스처를 입혀서 표현하고 메시의 좌표 값들은 다 투영좌표계의
좌표 값을 갖도록 하였음. 이유는 위치는 항상 고정이니 추가 이동에 대한 변환행렬만 셰이더에 보내주면
 카메라, 프로젝션 행렬의 곱셈없이 바로 레스터라이저로 넘길 수 있기 때문
-> 연산량 단축.

각 오브젝트들의 바운딩 박스를 카메라의 절두체와 
충돌 체크함으로써 절두체 컬링하도록 하였지만, 
고민거리 하나 발생. -> 인스턴싱에 포함되는 오브젝트들을 그릴 때 
반드시 하나는 그리게 되어 비디오 메모리의 접근은 피해갈 수 없는 상황인데 
이런 경우 컬링 없이 무조건 그리게 하는것이 좋을 지 아니면 
컬링을 적용해서 해당되는 오브젝트만 그리는 것이 더 효율적인지
판단을 못하고 있음.   (삼각형을 그리는 계산을 줄이느냐 vs 계층구조 오브젝트의 컬링계산을 줄이느냐)

애니메이션을 갖는 오브젝트는 animationController라는 변수를 갖고 있도록하고
생성자에서 컨트롤러에 스킨 메시와 각 애니메이션 트랙별 레이어에서의 
변환행렬을 담도록하고 랜더링때 실행되고 있는 트랙의 변환행렬을 
애니메이션 시간에 비례해서 각 정점에 곱하도록 하여 메시가 움직일 수 있도록 
하였음.
animationController는 트랙별 정보를 담아두고 사용자의 
입력방식(방향키)에 맞춰서 해당되는 애니메이션의 트랙을 On/Off 동작하도록 
관리하기 위해 제작.  

//-------------------------------------------------------
박건호 : 
공룡의 움직임에 따른 애니메이션 제작 (제자리, 턴, 달리기…etc)
저번주에 만든 맵을 의견을 받아 다시 다듬어서 좀더 깔끔해 보이고 한바퀴에 걸리는 
시간이 짧은 문제를 트랙의 코너를 좀더 추가해서 늘리는 형식으로 변경하였다.
공룡에 입힐 노말 맵핑을 추가로 구현 중
//-----------------------------------------------------
//-----------------------------------------------------
다음주 할 일 (2020.03.30 ~ 2020.04.05)
김영완: 
노말 맵핑, 공복 게이지, 물리 처리 구현

박건호:
노말맵핑 마무리, 애니메이션 오류 해결